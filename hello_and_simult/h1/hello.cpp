#include "hello.decl.h" // this will be generated by charmc
#include <chrono>

/*readonly*/ CProxy_Main mainProxy;
constexpr int nElem = 8;

/*mainchare*/
class Main : public CBase_Main
{
    public:
        Main(CkArgMsg* m)
        {
            // Start computation
            CkPrintf("Runnin Hello on %d processors with %d elements.\n", CkNumPes(), nElem);
            CProxy_Hello arr = CProxy_Hello::ckNew(nElem); // Create a new chare array with nElem elements
            mainProxy = thisProxy;
            // This is the entry method where
            // parallel, asynchronous computing starts
            // This method calls its counterparts
            // in other chares
            // instead of passing the parcel, entry methods could also have 
            // been called here, withing a loop
            arr[0].SayHi(0); // One already runs from the main / master chare ?


        };

        void done()
        {
            // Finish computation
            CkPrintf("All done.\n");
            CkExit();
        };

};



/*array [1D]*/
class Hello : public CBase_Hello
{
    public:
        Hello() {} // Empty constrctor

        void SayHi() // A method to say hi
        {
            auto start = std::chrono::high_resolution_clock::now();

            time_t start_t, end_t;
            clock_t start_c;
            double cpersec;

            cpersec = CLOCKS_PER_SEC;

            start_c = clock();

            time(&start_t);

            // thisIndex stores the element's array index
            CkPrintf("PE %d says: Hello world from element %d.\n", CkMyPe(), thisIndex);

            auto stop = std::chrono::high_resolution_clock::now();

            auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>(stop-start);
  
            // auto start_t = std::chrono::duration_cast<std::chrono::nanoseconds>(start);

            // time(&end);
            // double duration = double(end-start);

            CkPrintf("PE %d element %d time profile: Start %lf ticks, C per sec %lf, duration %lf ns \n", CkMyPe(), thisIndex, double(start_c), cpersec, double(duration.count()));
            // CkPrintf("PE %d element %d time profile: duration %lf\n", CkMyPe(), thisIndex, double(duration.count()));

            // ckout << "PE " << CkMyPe() << "element " << thisIndex << "time profile: Start " << start << "Duration " << duration << endl;

            if (thisIndex < nElem -1)
            {
                // Call hello from the next chare
                thisProxy[thisIndex+1].SayHi(); // Pass the hello
            }

            else 
            {
                mainProxy.done(); // We've been around once -- we're done.
            }

        }

};

#include "hello.def.h" // created from hello.ci file above
